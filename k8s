看k8s是否在运行， 可以通过查看进程的方式， 可以看到如下5个进程， 表示kube集群在运行
master@ubuntu:~/k8s$ ps -e | grep kube
 21268 ?        00:02:18 kubelet
 21714 ?        00:01:21 kube-controller
 21720 ?        00:02:46 kube-apiserver
 21725 ?        00:00:09 kube-scheduler
 22270 ?        00:00:04 kube-proxy
当然k8s启动的还有etcd进程

用top 命令也可以看到他们
 master@ubuntu:~/k8s$ top
top - 20:12:25 up  1:07,  3 users,  load average: 0.45, 0.56, 0.73
Tasks: 305 total,   1 running, 221 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.9 us,  0.9 sy,  0.0 ni, 96.5 id,  1.2 wa,  0.0 hi,  0.5 si,  0.0 st
KiB Mem :  2013364 total,    80948 free,  1365244 used,   567172 buff/cache
KiB Swap:        0 total,        0 free,        0 used.   470068 avail Mem
   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
 21720 root      20   0  540216 238048  20028 S   3.6 11.8   1:29.06 kube-apiserver
 21683 root      20   0 10.054g  37580   5584 S   3.0  1.9   0:47.20 etcd
 21268 root      20   0 1786188  48632  14512 S   2.3  2.4   1:06.91 kubelet
 21714 root      20   0  217756  49784   8864 S   1.7  2.5   0:41.35 kube-controller

 -n kube-system表示 kube 是k8s 的缩写，也是kubenates的缩写， kube-system代表了kube系统级的pod,  不属于普通应用的pod, 一般有负责通讯的5个pod
sudo kubectl get pods -n kube-system

创建线面两个yaml文件指定的Pod后， get node 才会看到状态转为运行状态： 
kubectl apply -f http://mirror.faasx.com/k8s/calico/v3.3.2/rbac-kdd.yaml
kubectl apply -f http://mirror.faasx.com/k8s/calico/v3.3.2/calico.yaml

sudo kubectl get node

让pod可以调度到master, 即master允许pod调度他上面： 
sudo kubectl taint nodes --all node-role.kubernetes.io/master-

yaml的命名规范， kind名字的缩写作为名字的后缀， 如rc 表示replicator controller:
master@ubuntu:~/k8s$ cat mysql-rc.yaml
apiVersion: v1
kind: ReplicationController
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "123456"
rc是有多个pod副本的集合， 上面的例子表示只有一个pod副本。 

sudo kubectl create -f mysql-rc.yaml 
create -f 会创建容器， 并启动， 默认会去远程拉去镜像， 如果想使用本地的镜像， 需要用一个参数。  TODO

sudo kubectl get pod 只会获取应用pod， 不会获取系统的pod

sudo kubectl get pod -o wide 可以看到更详细的信息

kube其实是管理docker的， 一个pod里包含着运行在同一个主机上的多个容器, kube虽然以pod为调度单位， 但最终是管理docker容器的
kube所有启动的docker容器都可以被
docker ps -a 命令看到
要想进入某个docekr容器的交互模式， 可以用docker ps -a 找到这个docker容器的id, 然后用docker -it bin/bash命令进入这个容器的交互模式： 
如docker ps -a  找到了名为mysql的容器的id, 那么进入容器的交互： 
sudo  docker exec -it f33925781974 /bin/bash

svc是service的缩写，按规范命名， 服务名-rc.yaml里面的kind字段必定是Service
master@ubuntu:~/k8s$ cat mysql-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
  labels:
    name: mysql-svc
spec:
  type: NodePort
  ports:
  - port: 3306
    protocol: TCP
    targetPort: 3306
    name: http
    nodePort: 32766
  selector:
    name: mysql-pod

虽然是应用服务， 但是用kubectl get pod ， 是看不到service的， pod和serrvice 是不同的实体， 还有persistvolume, 要用kubectl get pv来看。 
master@ubuntu:~/k8s$ kubectl get svc
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE
kubernetes   ClusterIP   10.96.0.1      <none>        443/TCP          155m
mysql-svc    NodePort    10.98.128.12   <none>        3306:32766/TCP   137m
 targetPort: 设置的3306是kube集群内部的端口，  集群外部是访问不到的， 
nodePort: 32766 才是外部可以访问的端口， 以实验的例子句子
虚拟机运行ubuntu, ubuntu运行kube集群， windows访问kube集群里的mysql这个服务， 用的命令为：
mysql -h 192.168.236.136 -P 32766 -u root -
即可访问到mysql服务

对外服务的端口可以通过 kubectl edit即时改变， 如
master@ubuntu:~/k8s$ kubectl edit svc/mysql-svc 进入编辑模式， 
把nodePort: 32766改为nodePort: 30000，外部可以访问的端口就变为30000， 
mysql -h 192.168.236.136 -P 32766 -u root -pmysql
亲测有效。 


-----------------------------------------------
所有系统级的服务的管理者命令都是以ctl 为后缀的，
如sytemctl , kubettl
第二个参数都是动作名， 如systemctl start , kubectl create 
第三个参数都是要操作的对象， 对于systemctl , 只操作服务，  对于kubeclt可以操作的比较广泛，可以是pod容器， 也可以是Pv等资源， 可以是configmap配置对象。 也可以是pod的众多管理者， 如rc, deploment, rs,service等。 
对于被操作的对象都有简写格式， 
如
systemctl start  etcd0.service可以简写为
systemctl start  etcd0
kubectl get pods 简写为;
kubectl get po
kubcctl 有众多的操作对象的简写列表， 可以在k8s权威指南查看

被操作的对象都有自己的描述文件：
systemctl操作的服务对象，对应的文件， 都放在
/etc/systemd/system/下面， 文件名都以.service为后缀， 放在这个目录， 以.service后缀，这样才会被systemctl 识别到
如/etc/systemd/system/etcd0.service
 kubectl操作的对象的描述文件一律是.yaml格式， 以.yaml文件为后缀，kubectl会首先用kubectl create -f xyz.yaml  创建好对象， 创建的对象的名字是文件里的name指定的。 对象创建好，后面都是按对象的名字来操作和使用对象， 可以直接kubectl 操作对象，如
kubectl get pod mysql-rc,
对于资源， 配置这样的对象，一般都是在其他的pod对象的yaml描述文件， 来使用这个对象。 
如：
volume :
     name；pv1
----------------------------------------------------------------------------------------
解释pod里的元素：
资源pv， 配置configmap, 以及service , rc, rs,stateful 等管理者， 都是在围绕pod的。 
资源和配置被pod使用。 






开机自启动的打开于关闭

kubectl 命令格式
configmal 的创建方式
pod的管理者， rc, depolment, rs, statefulset ， job， 各管理者对pod的部不同的管理用途
rs 滚动升级
k8s里的节点指的是一个node， 是一个物理主机
pod亲和读， pod于node的亲和度，  调度在指定的有ssd硬盘的node上， 
pod与pod的亲和度  两个pod需要调到同一个节点上， 不能调度在同一个节点上
